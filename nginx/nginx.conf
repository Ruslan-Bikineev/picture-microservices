user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 1100;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=proxy_cache:10m max_size=10g inactive=60m use_temp_path=off;

    server {
        listen 443 ssl;
        http2 on;
        server_name picture.ru www.picture.ru;
        ssl_certificate /etc/nginx/ssl/picture.crt;
        ssl_certificate_key /etc/nginx/ssl/picture.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        location /api {
            proxy_cache proxy_cache;
            proxy_cache_methods GET;
            # кэшируются только ответы 200, 301 и 302 по умолчанию
            proxy_cache_valid 5m;
            proxy_cache_valid 404 1m;
            # позволяет использовать устаревший закэшированный ответ
            proxy_cache_use_stale error timeout;
            proxy_pass http://gateway-service:8080/api;
        }

        location /admin {
            proxy_pass http://pgadmin:80/;
            proxy_set_header X-Script-Name /admin;
            proxy_set_header Host $host;
            proxy_redirect off;
        }

        location /api/swagger {
            proxy_pass http://gateway-service:8080/swagger/index.html;
            proxy_set_header Host $host;
            proxy_redirect /swagger/ /api/v1/swagger/;
            sub_filter_once off;
        }
        location /api/v1/swagger/ {
            proxy_pass http://gateway-service:8080/swagger/;
            proxy_set_header Host $host;
            proxy_redirect /swagger/ /api/v1/swagger/;
        }
        location /api-docs/swagger-config {
            proxy_pass http://gateway-service:8080/api-docs;
            proxy_set_header Host $host;
        }

        location = /status {
            stub_status;
        }
    }
}